package main

import (
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"
	"os/signal"
	"sort"
	"strconv"
	"strings"
	"sync"
	"syscall"
	"time"

	"github.com/bwmarrin/discordgo"
	"github.com/joho/godotenv"
)

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–µ—Ä–≤–µ—Ä–∞
type ServerConfig struct {
	GuildID          string `json:"server_id"`
	RegistrationRole string `json:"registration_role_id"`
	CategoryID       string `json:"category_id"`
	CommandChannelID string `json:"command_channel_id"`
	PreservedRoles   string `json:"preserved_roles"`
	GuildRoleId      string `json:"guild_role_id"`
	FriendRoleId     string `json:"friend_role_id"`
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
var (
	config            ServerConfig
	configFile        = "server_config.json"
	QuestionsFilePath = "question.json"
	questions         []Question
	registeringUsers  = make(map[string]*RegistrationState)
	mu                sync.Mutex
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤
type Question struct {
	Question string            `json:"question"`
	Result   string            `json:"result"`
	Switch   map[string]string `json:"switch,omitempty"`
}

// –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
type RegistrationState struct {
	Step            int
	ChannelID       string
	Answers         []string
	CurrentQuestion *Question
}

func main() {
	// –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
	if err := loadConfig(); err != nil {
		fmt.Println("‚ö†Ô∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É !init –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
	}

	// –ó–∞–≥—Ä—É–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã
	if err := loadQuestions(); err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–æ–ø—Ä–æ—Å–æ–≤:", err)
		return
	}
	err := godotenv.Load()
	if err != nil {
		fmt.Println(err.Error())
		return
	}
	session, err := discordgo.New("Bot " + os.Getenv("DISCORD_BOT_TOKEN"))
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–µ—Å—Å–∏–∏:", err)
		return
	}

	session.AddHandler(newGuildMember)
	session.AddHandler(messageCreate)

	session.Identify.Intents = discordgo.IntentsGuildMessages |
		discordgo.IntentsGuildMembers |
		discordgo.IntentsGuilds

	err = session.Open()
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è:", err)
		return
	}
	defer session.Close()

	fmt.Println("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Ctrl+C")
	sc := make(chan os.Signal, 1)
	signal.Notify(sc, syscall.SIGINT, syscall.SIGTERM, os.Interrupt)
	<-sc
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func loadConfig() error {
	file, err := os.ReadFile(configFile)
	if err != nil {
		return err
	}
	return json.Unmarshal(file, &config)
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
func saveConfig() error {
	data, err := json.MarshalIndent(config, "", "  ")
	if err != nil {
		fmt.Println(err.Error())
		return err
	}
	return os.WriteFile(configFile, data, 0644)
}

// –ó–∞–≥—Ä—É–∑–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ JSON
func loadQuestions() error {
	file, err := os.ReadFile(QuestionsFilePath)
	if err != nil {
		return err
	}
	return json.Unmarshal(file, &questions)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
func newGuildMember(s *discordgo.Session, m *discordgo.GuildMemberAdd) {
	if m.GuildID != config.GuildID {
		return
	}

	// –í—ã–¥–∞–µ–º —Ä–æ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	roleID := findRoleID(s, m.GuildID, config.RegistrationRole)
	if roleID == "" {
		fmt.Println("–†–æ–ª—å '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
		return
	}

	err := s.GuildMemberRoleAdd(m.GuildID, m.User.ID, roleID)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏:", err)
		return
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
	channel, err := createPrivateChannel(s, m.Member)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞:", err)
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
	mu.Lock()
	state := &RegistrationState{
		Step:      0,
		ChannelID: channel.ID,
		Answers:   []string{},
	}
	registeringUsers[m.User.ID] = state
	mu.Unlock()

	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
	sendNextQuestion(s, state, channel.ID, m.User.ID)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
func sendNextQuestion(s *discordgo.Session, state *RegistrationState, channelID, userID string) {
	if state.Step >= len(questions) {
		completeRegistration(s, state, userID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
	currentQuestion := questions[state.Step]
	state.CurrentQuestion = &currentQuestion

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
	message := currentQuestion.Question
	if currentQuestion.Switch != nil {
		message += "\n\n**–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:**"
		keys := make([]int, 0, len(currentQuestion.Switch))
		for k := range currentQuestion.Switch {
			key, _ := strconv.Atoi(k)
			keys = append(keys, key)
		}
		sort.Slice(keys, func(i, j int) bool {
			return keys[i] < keys[j]
		})
		for _, key := range keys {
			message += fmt.Sprintf("\n`%d` - %s", key, currentQuestion.Switch[strconv.Itoa(key)])
		}
	}

	s.ChannelMessageSend(channelID, message)
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
func createPrivateChannel(s *discordgo.Session, member *discordgo.Member) (*discordgo.Channel, error) {
	channelName := "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-" + strings.ToLower(member.User.Username)

	channelData := discordgo.GuildChannelCreateData{
		Name:     channelName,
		Type:     discordgo.ChannelTypeGuildText,
		ParentID: config.CategoryID,
		PermissionOverwrites: []*discordgo.PermissionOverwrite{
			{ID: member.User.ID, Type: discordgo.PermissionOverwriteTypeMember,
				Allow: discordgo.PermissionViewChannel | discordgo.PermissionSendMessages},
			{ID: s.State.User.ID, Type: discordgo.PermissionOverwriteTypeMember,
				Allow: discordgo.PermissionAll},
			{ID: config.GuildID, Type: discordgo.PermissionOverwriteTypeRole,
				Deny: discordgo.PermissionViewChannel},
		},
	}

	return s.GuildChannelCreateComplex(config.GuildID, channelData)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func messageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–≤
	if m.Author.Bot {
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã !init
	if strings.HasPrefix(m.Content, "!init") {
		handleInitCommand(s, m)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if m.ChannelID == config.CommandChannelID && strings.HasPrefix(m.Content, "!") {
		handleAdminCommand(s, m)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	mu.Lock()
	state, ok := registeringUsers[m.Author.ID]
	mu.Unlock()

	if ok && m.ChannelID == state.ChannelID && state.CurrentQuestion != nil {
		processRegistrationAnswer(s, m, state)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func processRegistrationAnswer(s *discordgo.Session, m *discordgo.MessageCreate, state *RegistrationState) {
	answer := strings.TrimSpace(m.Content)
	q := state.CurrentQuestion

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
	if q.Result == "int" {
		valid := false
		for key := range q.Switch {
			if key == answer {
				valid = true
				break
			}
		}
		if !valid {
			options := []string{}
			for key := range q.Switch {
				options = append(options, "`"+key+"`")
			}
			s.ChannelMessageSend(m.ChannelID,
				"‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: "+
					strings.Join(options, ", "))
			return
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
	state.Answers = append(state.Answers, answer)
	state.Step++

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
	sendNextQuestion(s, state, m.ChannelID, m.Author.ID)
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func completeRegistration(s *discordgo.Session, state *RegistrationState, userID string) {
	channelID := state.ChannelID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∏–∫ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	nickParts := strings.Split(state.Answers[0], "(")
	nickname := strings.TrimSpace(nickParts[0])

	// –ú–µ–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º
	err := s.GuildMemberNickname(config.GuildID, userID, nickname)
	if err != nil {
		s.ChannelMessageSend(channelID, "‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–∞: "+err.Error())
	} else {
		s.ChannelMessageSend(channelID, "‚úÖ –¢–≤–æ–π –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: "+nickname)
	}

	// –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	_ = s.GuildMemberRoleRemove(config.GuildID, userID, config.RegistrationRole)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
	summary := "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
	for i, answer := range state.Answers {
		q := questions[i]
		if q.Switch != nil {
			if answer == "1" {
				err = s.GuildMemberRoleAdd(config.GuildID, userID, config.GuildRoleId)
				if err != nil {
					fmt.Println(err.Error())
				}
			} else if answer == "2" {
				err = s.GuildMemberRoleAdd(config.GuildID, userID, config.FriendRoleId)
				if err != nil {
					fmt.Println(err.Error())
				}
			}
		}
	}
	s.ChannelMessageSend(channelID, summary)

	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±–æ—Ä—É
	handleChoice(s, state, channelID)

	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
	go func() {
		time.Sleep(30 * time.Second)
		mu.Lock()
		delete(registeringUsers, userID)
		mu.Unlock()
		_, _ = s.ChannelDelete(channelID)
	}()
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleChoice(s *discordgo.Session, state *RegistrationState, channelID string) {
	if len(state.Answers) < 2 {
		return
	}

	choice := state.Answers[1]
	switch choice {
	case "1":
		s.ChannelMessageSend(channelID, "\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥–∏–ª—å–¥–∏—é! –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –∫–∞–Ω–∞–ª–µ.")
	case "2":
		s.ChannelMessageSend(channelID, "\n–ú—ã —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å! –æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ `–æ–±—â–∏–π` —á–∞—Ç")
	case "3":
		s.ChannelMessageSend(channelID, "\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ù–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
	}
}

// –ü–æ–∏—Å–∫ ID —Ä–æ–ª–∏ –ø–æ –∏–º–µ–Ω–∏
func findRoleID(s *discordgo.Session, guildID, roleID string) string {
	roles, err := s.GuildRoles(guildID)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–æ–ª–µ–π:", err)
		return ""
	}

	for _, role := range roles {
		if strings.EqualFold(role.ID, roleID) {
			return role.ID
		}
	}
	return ""
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func handleAdminCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if !isAdmin(s, m) {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
		return
	}
	switch strings.ToLower(m.Content) {
	case "!clsroles":
		removeAllRoles(s, m)

	case "!startregistred":
		startRegistrationForUnregistered(s, m)

	case "!stopregistred":
		stopAllRegistrations(s, m)

	case "!help":
		showHelp(s, m)

	case "!status":
		handleStatusCommand(s, m)

	default:
		s.ChannelMessageSend(m.ChannelID, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π `!help` –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏
func handleInitCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	args := strings.Fields(m.Content)
	if len(args) < 2 {
		showInitHelp(s, m.ChannelID)
		return
	}

	switch args[1] {
	case "guild":
		if len(args) < 3 {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Å–µ—Ä–≤–µ—Ä–∞: `!init guild <server_id>`")
			return
		}
		config.GuildID = args[2]

	case "role":
		if len(args) < 3 {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ä–æ–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: `!init role <role_id>`")
			return
		}
		config.RegistrationRole = args[2]

	case "category":
		if len(args) < 3 {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏: `!init category <category_id>`")
			return
		}
		config.CategoryID = args[2]

	case "channel":
		if len(args) < 3 {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∫–∞–Ω–∞–ª–∞ –∫–æ–º–∞–Ω–¥: `!init channel <channel_id>`")
			return
		}
		config.CommandChannelID = args[2]

	case "preserved":
		if len(args) < 3 {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ —Ä–æ–ª–∏: `!init preserved –†–æ–ª—å1,–†–æ–ª—å2,...`")
			return
		}
		config.PreservedRoles = args[2]

	case "guild_role":
		if len(args) < 3 {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ä–æ–ª–∏ —Å–æ–≥–∏–ª—å–¥–∏–π—Ü–∞: `!init guild_role <role_id>`")
			return
		}
		config.GuildRoleId = args[2]

	case "friend_role":
		if len(args) < 3 {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –£–∫–∞–∂–∏—Ç–µ ID —Ä–æ–ª–∏ –¥—Ä—É–≥–∞: `!init friend_role <role_id>`")
			return
		}
		config.RegistrationRole = args[2]

	case "load":
		if len(m.Attachments) == 0 {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ JSON-—Ñ–∞–π–ª —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
			return
		}

		attachment := m.Attachments[0]
		if !strings.HasSuffix(attachment.Filename, ".json") {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON")
			return
		}

		// –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
		resp, err := http.Get(attachment.URL)
		if err != nil {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: "+err.Error())
			return
		}
		defer resp.Body.Close()

		// –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
		data, err := io.ReadAll(resp.Body)
		if err != nil {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: "+err.Error())
			return
		}

		// –ü–∞—Ä—Å–∏–º JSON
		var newConfig ServerConfig
		if err := json.Unmarshal(data, &newConfig); err != nil {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON: "+err.Error())
			return
		}

		// –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
		config = newConfig
		s.ChannelMessageSend(m.ChannelID, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ —Ñ–∞–π–ª–∞!")
		showCurrentConfig(s, m.ChannelID)

	case "save":
		if err := saveConfig(); err != nil {
			s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: "+err.Error())
		} else {
			s.ChannelMessageSend(m.ChannelID, "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞!")
		}
		if err := loadConfig(); err != nil {
			s.ChannelMessageSend(m.ChannelID, "–û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫")
		}
		return

	case "show":
		showCurrentConfig(s, m.ChannelID)
		return

	default:
		showInitHelp(s, m.ChannelID)
		return
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf(
		"‚úÖ –ü–∞—Ä–∞–º–µ—Ç—Ä '%s' –æ–±–Ω–æ–≤–ª–µ–Ω. –ù–µ –∑–∞–±—É–¥—å—Ç–µ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥–æ–π `!init save`", args[1]))
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É –ø–æ –∫–æ–º–∞–Ω–¥–µ !init
func showInitHelp(s *discordgo.Session, channelID string) {
	help := `**‚öôÔ∏è –ö–æ–º–∞–Ω–¥–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–µ—Ä–≤–µ—Ä–∞:**
!init guild <server_id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —Å–µ—Ä–≤–µ—Ä–∞
!init role <role_id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID —Ä–æ–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
!init category <category_id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
!init channel <channel_id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥
!init preserved <roles_id> - –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ —Ä–æ–ª–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
!init guild_role <role_id> - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ –¥–ª—è —Å–æ–≥–∏–ª—å–¥–∏–π—Ü–µ–≤
!init friend_role <role_id> - –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–æ–ª–∏ –¥–ª—è –¥—Ä—É–∑–µ–π
!init load <json file> - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ —Ñ–∞–π–ª
!init save - –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
!init show - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é

**‚ÑπÔ∏è –ö–∞–∫ –ø–æ–ª—É—á–∏—Ç—å ID:**
1. –í–∫–ª—é—á–∏—Ç–µ —Ä–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞ –≤ Discord (–ù–∞—Å—Ç—Ä–æ–π–∫–∏ > –†–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ)
2. –ü–ö–ú –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç–µ —Å–µ—Ä–≤–µ—Ä–∞/—Ä–æ–ª–∏/–∫–∞–Ω–∞–ª–∞ > –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID`

	s.ChannelMessageSend(channelID, help)
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
func showCurrentConfig(s *discordgo.Session, channelID string) {
	if _, err := os.Stat(configFile); err == os.ErrNotExist {
		response := "**–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –∑–∞–¥–∞–Ω–∞!**"
		s.ChannelMessageSend(channelID, response)
		return
	}
	response := "**–¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:**\n"
	response += fmt.Sprintf("–°–µ—Ä–≤–µ—Ä (GuildID): ` %s `\n", config.GuildID)
	response += fmt.Sprintf("–†–æ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: <@&%s>\n", config.RegistrationRole)
	response += fmt.Sprintf("–ö–∞—Ç–µ–≥–æ—Ä–∏—è –∫–∞–Ω–∞–ª–æ–≤: ` %s `\n", config.CategoryID)
	response += fmt.Sprintf("–ö–∞–Ω–∞–ª –∫–æ–º–∞–Ω–¥: ` %s `\n", config.CommandChannelID)
	var preservedRoles string
	for _, v := range strings.Split(config.PreservedRoles, ",") {
		preservedRoles += "<@&" + v + ">, "
	}
	response += fmt.Sprintf("–°–æ—Ö—Ä–∞–Ω—è–µ–º—ã–µ —Ä–æ–ª–∏: %s\n", preservedRoles)
	response += fmt.Sprintf("–†–æ–ª—å –°–æ–≥–∏–ª—å–¥–∏–π—Ü–∞: <@&%s>\n", config.GuildRoleId)
	response += fmt.Sprintf("–†–æ–ª—å –¥—Ä—É–≥–∞: <@&%s>\n", config.FriendRoleId)
	response += "\n–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ `!init save` –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π"

	s.ChannelMessageSend(channelID, response)
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
func isAdmin(s *discordgo.Session, m *discordgo.MessageCreate) bool {
	perms, err := s.UserChannelPermissions(m.Author.ID, m.ChannelID)
	if err != nil {
		fmt.Println("–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤:", err)
		return false
	}
	return perms&discordgo.PermissionAdministrator != 0
}

// –£–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π —É –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
func removeAllRoles(s *discordgo.Session, m *discordgo.MessageCreate) {
	s.ChannelMessageSend(m.ChannelID, "‚è≥ –ù–∞—á–∏–Ω–∞—é —É–¥–∞–ª–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–æ–ª–µ–π... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è")

	members, err := s.GuildMembers(config.GuildID, "", 1000)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: "+err.Error())
		return
	}

	everyoneRoleID := ""
	roles, err := s.GuildRoles(config.GuildID)
	if err == nil {
		for _, role := range roles {
			if role.Name == "@everyone" {
				everyoneRoleID = role.ID
				break
			}
		}
	}

	successCount := 0
	failCount := 0

	for _, member := range members {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
		if member.User.Bot {
			continue
		}

		// –û—Å—Ç–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ä–æ–ª—å @everyone
		newRoles := []string{}
		if everyoneRoleID != "" {
			newRoles = append(newRoles, everyoneRoleID)
		}

		_, err := s.GuildMemberEdit(config.GuildID, member.User.ID, &discordgo.GuildMemberParams{
			Roles: &newRoles,
		})

		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ä–æ–ª–µ–π —É %s: %v\n", member.User.Username, err)
			failCount++
		} else {
			successCount++
		}

		// –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ª–∏–º–∏—Ç–æ–≤
		time.Sleep(200 * time.Millisecond)
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf(
		"‚úÖ –£–¥–∞–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–£—Å–ø–µ—à–Ω–æ: %d\n–ù–µ —É–¥–∞–ª–æ—Å—å: %d",
		successCount, failCount))
}

// –ó–∞–ø—É—Å–∫ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –¥–ª—è –Ω–µ–∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
func startRegistrationForUnregistered(s *discordgo.Session, m *discordgo.MessageCreate) {
	registrationRoleID := findRoleID(s, config.GuildID, config.RegistrationRole)
	if registrationRoleID == "" {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –†–æ–ª—å '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
		return
	}

	members, err := s.GuildMembers(config.GuildID, "", 1000)
	if err != nil {
		s.ChannelMessageSend(m.ChannelID, "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: "+err.Error())
		return
	}

	count := 0
	for _, member := range members {
		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
		if member.User.Bot {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ä–æ–ª–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		hasRegistrationRole := false
		for _, role := range member.Roles {
			if role == registrationRoleID {
				hasRegistrationRole = true
				break
			}
		}

		// –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
		if hasRegistrationRole {
			continue
		}

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ª–∏ —É–∂–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
		mu.Lock()
		_, inProgress := registeringUsers[member.User.ID]
		mu.Unlock()

		if !inProgress {
			// –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			err := s.GuildMemberRoleAdd(config.GuildID, member.User.ID, registrationRoleID)
			if err != nil {
				fmt.Printf("–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏ %s: %v\n", member.User.Username, err)
				continue
			}

			// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
			go func(userID string) {
				// –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏
				time.Sleep(1 * time.Second)
				newGuildMember(s, &discordgo.GuildMemberAdd{
					Member: &discordgo.Member{
						GuildID: config.GuildID,
						User:    member.User,
					},
				})
			}(member.User.ID)

			count++
			time.Sleep(500 * time.Millisecond) // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
		}
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf(
		"‚úÖ –ó–∞–ø—É—â–µ–Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –¥–ª—è %d –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", count))
}

// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
func stopAllRegistrations(s *discordgo.Session, m *discordgo.MessageCreate) {
	mu.Lock()
	defer mu.Unlock()

	count := 0
	for userID, state := range registeringUsers {
		// –£–¥–∞–ª—è–µ–º –∫–∞–Ω–∞–ª
		_, err := s.ChannelDelete(state.ChannelID)
		if err != nil {
			fmt.Printf("–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ %s: %v\n", state.ChannelID, err)
		} else {
			count++
		}

		// –£–¥–∞–ª—è–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É—é—â–∏—Ö—Å—è
		delete(registeringUsers, userID)
	}

	s.ChannelMessageSend(m.ChannelID, fmt.Sprintf(
		"‚úÖ –ü—Ä–µ—Ä–≤–∞–Ω–æ %d —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–µ—Å—Å–∏–π", count))
}

// –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø—Ä–∞–≤–∫–∏ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
func showHelp(s *discordgo.Session, m *discordgo.MessageCreate) {
	helpMessage := `**üìù –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**

!clsRoles - –£–¥–∞–ª—è–µ—Ç –í–°–ï —Ä–æ–ª–∏ —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å–µ—Ä–≤–µ—Ä–∞
!startRegistred - –ó–∞–ø—É—Å–∫–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ —Ä–æ–ª–∏ "–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è"
!stopRegistred - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø—Ä–µ—Ä—ã–≤–∞–µ—Ç –í–°–ï –∞–∫—Ç–∏–≤–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–µ—Å—Å–∏–∏
!help - –ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ

**‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:**
- –ö–æ–º–∞–Ω–¥—ã —Ä–∞–±–æ—Ç–∞—é—Ç —Ç–æ–ª—å–∫–æ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º –∫–∞–Ω–∞–ª–µ –¥–ª—è –∫–æ–º–∞–Ω–¥
- –¢—Ä–µ–±—É—é—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
- –ö–æ–º–∞–Ω–¥–∞ !clsRoles –Ω–µ–æ–±—Ä–∞—Ç–∏–º–∞ –∏ —É–¥–∞–ª—è–µ—Ç –í–°–ï —Ä–æ–ª–∏ —É –í–°–ï–• –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
- –ü—Ä–µ—Ä–≤–∞–Ω–Ω—ã–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ (!stopRegistred) –ø–æ—Ç—Ä–µ–±—É—é—Ç –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞`

	s.ChannelMessageSend(m.ChannelID, helpMessage)
}

func handleStatusCommand(s *discordgo.Session, m *discordgo.MessageCreate) {
	mu.Lock()
	activeSessions := len(registeringUsers)
	mu.Unlock()

	// –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å–µ—Ä–≤–µ—Ä–∞
	guild, _ := s.Guild(config.GuildID)

	response := fmt.Sprintf("**ü§ñ –°—Ç–∞—Ç—É—Å –±–æ—Ç–∞:**\n–í–µ—Ä—Å–∏—è: 1.0.0\n–ü–∏–Ω–≥: %dms\n–ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: %d\n\n**üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:**\n–ì–∏–ª—å–¥–∏—è: %s\n–í—Å–µ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: %d\n–†–æ–ª–µ–π: %d\n",
		s.HeartbeatLatency().Milliseconds(),
		activeSessions,
		guild.Name,
		len(guild.Members),
		len(guild.Roles))

	s.ChannelMessageSend(m.ChannelID, response)
}

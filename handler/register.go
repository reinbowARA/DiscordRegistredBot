package handler

import (
	"fmt"
	"sort"
	"strconv"
	"strings"
	"time"

	"github.com/bwmarrin/discordgo"
)

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞
func (sc *ServerConfig) NewGuildMember(s *discordgo.Session, m *discordgo.GuildMemberAdd) {
	if m.GuildID != sc.GuildID {
		return
	}

	// –í—ã–¥–∞–µ–º —Ä–æ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	roleID := findRoleID(s, m.GuildID, sc.RegistrationRole)
	if roleID == "" {
		logger.Warn("–†–æ–ª—å '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
		return
	}

	err := s.GuildMemberRoleAdd(m.GuildID, m.User.ID, roleID)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –≤—ã–¥–∞—á–∏ —Ä–æ–ª–∏: " + err.Error())
		return
	}

	// –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª
	channel, err := sc.createPrivateChannel(s, m.Member)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞: " + err.Error())
		return
	}

	// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
	mu.Lock()
	state := &RegistrationState{
		Step:      0,
		ChannelID: channel.ID,
		Answers:   []string{},
	}
	registeringUsers[m.User.ID] = state
	mu.Unlock()
	logger.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" + m.User.ID + "(" + m.User.Username + ") –Ω–∞—á–∞–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
	// –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
	sc.sendNextQuestion(s, state, channel.ID, m.User.ID)
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
func (sc *ServerConfig) sendNextQuestion(s *discordgo.Session, state *RegistrationState, channelID, userID string) {
	if state.Step >= len(questions) {
		sc.completeRegistration(s, state, userID)
		return
	}

	// –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å
	currentQuestion := questions[state.Step]
	state.CurrentQuestion = &currentQuestion

	// –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å
	message := currentQuestion.Question
	if currentQuestion.Switch != nil {
		message += "\n\n**–í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞:**"
		keys := make([]int, 0, len(currentQuestion.Switch))
		for k := range currentQuestion.Switch {
			key, _ := strconv.Atoi(k)
			keys = append(keys, key)
		}
		sort.Slice(keys, func(i, j int) bool {
			return keys[i] < keys[j]
		})
		for _, key := range keys {
			message += fmt.Sprintf("\n`%d` - %s", key, currentQuestion.Switch[strconv.Itoa(key)])
		}
	}

	s.ChannelMessageSend(channelID, message)
}

// –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–∏–≤–∞—Ç–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
func (sc *ServerConfig) createPrivateChannel(s *discordgo.Session, member *discordgo.Member) (*discordgo.Channel, error) {
	channelName := "—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è-" + strings.ToLower(member.User.Username)

	channelData := discordgo.GuildChannelCreateData{
		Name:     channelName,
		Type:     discordgo.ChannelTypeGuildText,
		ParentID: sc.CategoryID,
		PermissionOverwrites: []*discordgo.PermissionOverwrite{
			{ID: member.User.ID, Type: discordgo.PermissionOverwriteTypeMember,
				Allow: discordgo.PermissionViewChannel | discordgo.PermissionSendMessages},
			{ID: s.State.User.ID, Type: discordgo.PermissionOverwriteTypeMember,
				Allow: discordgo.PermissionAll},
			{ID: sc.GuildID, Type: discordgo.PermissionOverwriteTypeRole,
				Deny: discordgo.PermissionViewChannel},
		},
	}

	return s.GuildChannelCreateComplex(sc.GuildID, channelData)
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π
func (sc *ServerConfig) MessageCreate(s *discordgo.Session, m *discordgo.MessageCreate) {
	// –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–æ–≤
	if m.Author.Bot {
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã !init
	if strings.HasPrefix(m.Content, "!init") {
		sc.handleInitCommand(s, m)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
	if m.ChannelID == sc.CommandChannelID && strings.HasPrefix(m.Content, "!") {
		sc.handleAdminCommand(s, m)
		return
	}

	// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	mu.Lock()
	state, ok := registeringUsers[m.Author.ID]
	mu.Unlock()

	if ok && m.ChannelID == state.ChannelID && state.CurrentQuestion != nil {
		sc.processRegistrationAnswer(s, m, state)
	}
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (sc *ServerConfig) processRegistrationAnswer(s *discordgo.Session, m *discordgo.MessageCreate, state *RegistrationState) {
	answer := strings.TrimSpace(m.Content)
	q := state.CurrentQuestion

	// –í–∞–ª–∏–¥–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
	if q.Result == "int" {
		valid := false
		for key := range q.Switch {
			if key == answer {
				valid = true
				break
			}
		}
		if !valid {
			options := []string{}
			for key := range q.Switch {
				options = append(options, "`"+key+"`")
			}
			s.ChannelMessageSend(m.ChannelID,
				"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–∏–Ω –∏–∑ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–Ω—ã—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤: "+
					strings.Join(options, ", "))
			return
		}
	}

	// –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç
	state.Answers = append(state.Answers, answer)
	state.Step++

	// –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
	sc.sendNextQuestion(s, state, m.ChannelID, m.Author.ID)
}

// –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
func (sc *ServerConfig) completeRegistration(s *discordgo.Session, state *RegistrationState, userID string) {
	channelID := state.ChannelID

	// –ò–∑–≤–ª–µ–∫–∞–µ–º –Ω–∏–∫ –∏–∑ –ø–µ—Ä–≤–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
	nickParts := strings.Split(state.Answers[0], "(")
	nickname := strings.TrimSpace(nickParts[0])

	// –ú–µ–Ω—è–µ–º –Ω–∏–∫–Ω–µ–π–º
	err := s.GuildMemberNickname(sc.GuildID, userID, nickname)
	if err != nil {
		logger.Error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–∞: " + err.Error())
		s.ChannelMessageSend(channelID, "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ –Ω–∏–∫–∞: "+err.Error())
	} else {
		s.ChannelMessageSend(channelID, "–¢–≤–æ–π –Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: "+nickname)
	}

	// –£–¥–∞–ª—è–µ–º —Ä–æ–ª—å —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	_ = s.GuildMemberRoleRemove(sc.GuildID, userID, sc.RegistrationRole)

	// –§–æ—Ä–º–∏—Ä—É–µ–º —Å–≤–æ–¥–∫—É
	summary := "üéâ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n"
	for i, answer := range state.Answers {
		q := questions[i]
		if q.Switch != nil {
			if answer == "1" {
				err = s.GuildMemberRoleAdd(sc.GuildID, userID, sc.GuildRoleId)
				if err != nil {
					fmt.Println(err.Error())
				}
			} else if answer == "2" {
				err = s.GuildMemberRoleAdd(sc.GuildID, userID, sc.FriendRoleId)
				if err != nil {
					fmt.Println(err.Error())
				}
			}
		}
	}
	s.ChannelMessageSend(channelID, summary)
	logger.Info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ID:" + userID + " –∑–∞–≤–µ—Ä—à–∏–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é!")
	// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ –≤—ã–±–æ—Ä—É
	handleChoice(s, state, channelID)

	// –£–¥–∞–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
	go func() {
		time.Sleep(30 * time.Second)
		mu.Lock()
		delete(registeringUsers, userID)
		mu.Unlock()
		_, _ = s.ChannelDelete(channelID)
	}()
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
func handleChoice(s *discordgo.Session, state *RegistrationState, channelID string) {
	if len(state.Answers) < 2 {
		return
	}

	choice := state.Answers[1]
	switch choice {
	case "1":
		s.ChannelMessageSend(channelID, "\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–∞—à—É –≥–∏–ª—å–¥–∏—é! –û–∑–Ω–∞–∫–æ–º—å—Å—è —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –∫–∞–Ω–∞–ª–µ.")
	case "2":
		s.ChannelMessageSend(channelID, "\n–ú—ã —Ä–∞–¥—ã —Å–æ—Ç—Ä—É–¥–Ω–∏—á–∞—Ç—å! –æ—Å—Ç–∞–≤—å—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤ `–æ–±—â–∏–π` —á–∞—Ç")
	case "3":
		s.ChannelMessageSend(channelID, "\n–°–ø–∞—Å–∏–±–æ –∑–∞ –∏–Ω—Ç–µ—Ä–µ—Å! –ù–∞—à–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç–µ–ª–∏ –æ—Ç–≤–µ—Ç—è—Ç –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.")
	}
}
